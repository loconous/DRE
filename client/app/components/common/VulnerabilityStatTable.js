import React from "react";

import Accordion from 'react-bootstrap/Accordion'

import {
  Row,
  Card,
  CardHeader,
  Table,
  UncontrolledTooltip
} from "reactstrap";
import { styles } from './styles';

import { VulnerabilityStyles } from './VulnerabilityStyles';

class VulnerabilityStatTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      auth_list: props.auth_list,
      stats: props.stats,
      title: props.title,
      headers: props.headers
    }

    this.renderBody = this.renderBody.bind(this);
    this.renderHeaders = this.renderHeaders.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    if (this.props != nextProps) {
      this.setState({
        auth_list: nextProps.auth_list,
        stats: nextProps.stats,
        title: nextProps.title,
        headers: nextProps.headers
      }, () => { });
    }
  }

  renderHeaders() {
    const { headers } = this.state;
    if (headers.length) {
      return headers.map((header, index) => {
        return (
          <th id={header} key={index} scope="col">{header}</th>
        )
      })
    }
  }


  renderBody() {
    let { stats } = this.state;
    if (stats) {
      // if (this.state.title == 'Blobs')
      // stats.sort((a,b) => b.author - a.author);
      return stats.map((proj) => {
        if (this.state.title == 'Blobs') {
          const { authors, projects, commits, blob, authors_list } = proj;
          const auth_include = Object.keys(this.state.auth_list);
          return (
            <Accordion>
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                  <tr key={blob.substr(1, 4)}>
                    <th scope="row">
                      <a href="#" onClick={(e) => { e.preventDefault(); this.props.onClickBlob(blob); }}>
                        {blob}
                      </a>
                    </th>
                    <td>{authors}</td>
                    <td>{projects}</td>
                    <td>{commits}</td>
                  </tr>
                </Accordion.Header>
                <Accordion.Body>
                  {authors_list.map((auth_name) => {
                    const test = auth_include.includes(auth_name)
                    return (
                      <Accordion>
                        <Accordion.Item eventKey="0">
                          <Accordion.Header>
                            <div key={blob.substr(1, 4)}>{auth_name}</div>


                          </Accordion.Header>
                          <Accordion.Body>
                            Test2
                            {JSON.stringify(test)}
                          </Accordion.Body>
                        </Accordion.Item>
                      </Accordion>
                    )
                  })}
                  {/* { for (var i = 0; i < authors_list.length; i++) {
                for (var key in auth_list) {
                  if (authors_list[i] == key) {
                    {auth_list.proj_name}
                    {auth_list.commit_name}
                  }
                }
              } } */}
                  {/* <td>{authors_list.map(author_details))}</td> */}
                </Accordion.Body>
              </Accordion.Item>
            </Accordion>
          )
        }
      })
    }
  }

  render() {
    return (
      <Card className="shadow">
        <CardHeader className="border-0">
          <Row className="align-items-center">
            {this.state.title == 'Blobs' &&
              <>
                <UncontrolledTooltip placement="bottom" target="Authors">
                  The number of authors with this blob.
                </UncontrolledTooltip>
                <UncontrolledTooltip placement="bottom" target="Projects">
                  The number of projects with this blob.
                </UncontrolledTooltip>
                <UncontrolledTooltip placement="bottom" target="Commits">
                  The number of commits with this blob.
                </UncontrolledTooltip>
              </>
            }
            {this.state.title &&
              <div className="col">
                <h3 className="mb-0">{this.state.title}</h3>
              </div>
            }
          </Row>
        </CardHeader>
        <Table style={styles.table} className="align-items-center table-flush" responsive>
          <thead style={VulnerabilityStyles.thread} className="thead-light">
          {/* <thead style={styles.thead} className="thead-light"> */}
            <tr>
              {this.renderHeaders()}
            </tr>
          </thead>
          <tbody style={VulnerabilityStyles.tbody}>
            {this.renderBody()}
          </tbody>
        </Table>
      </Card>
    );
  }
}

export default VulnerabilityStatTable;
