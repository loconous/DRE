import React from "react";

import Accordion from 'react-bootstrap/Accordion'
import 'bootstrap/dist/css/bootstrap.min.css';

import VulnerabilityProjectCard from "../common/VulnerabilityProjectCard";

import {
  Row,
  Card,
  CardHeader,
  Container,
  Table,
  UncontrolledTooltip
} from "reactstrap";

import { VulnerabilityStyles } from './VulnerabilityStyles';

class VulnerabilityStatTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      auth_list: props.auth_list,
      stats: props.stats,
      title: props.title,
      headers: props.headers
    }

    this.renderBody = this.renderBody.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    if (this.props != nextProps) {
      this.setState({
        auth_list: nextProps.auth_list,
        stats: nextProps.stats,
        title: nextProps.title,
        headers: nextProps.headers
      }, () => { });
    }
  }


  renderBody() {
    let { stats } = this.state;
    if (stats) {
      // if (this.state.title == 'Blobs')
      // stats.sort((a,b) => b.author - a.author);
      return stats.map((proj) => {
        if (this.state.title == 'Blobs') {
          const { hash, commits } = proj;
          // const { authors, projects, commits, blob, authors_list } = proj;
          const auth_include = Object.keys(this.state.auth_list);
          return (
            <Accordion key={hash}>
              {/* <Accordion key={blob}> */}
              <Accordion.Item eventKey="0">
                <Accordion.Header>
                      <a href="#" onClick={(e) => { e.preventDefault(); this.props.onClickBlob(blob); }}>
                        {hash}
                        {/* {blob} */}
                      </a>
                </Accordion.Header>
                <Accordion.Body>
                {/* {authors_list.map((auth_name) => { */}
                  {commits.map(({ commit, tree, author, authorTime, projects }) => {
                    //const test = auth_include.includes(commit_name)
                    // const test = auth_include.includes(auth_name)
                    // const { commit, tree, author, authorTime, projects } = commit_name;
                    return (
                      <Accordion key={commit_name}>
                        {/* <Accordion key={auth_name}> */}
                        <Accordion.Item eventKey="0">
                          <Accordion.Header>
                            {author}
                            {/* {auth_name} */}
                          </Accordion.Header>
                          <Accordion.Body>
                            {/* {test && */}
                            <div>
                              <VulnerabilityProjectCard
                                title="Project Name"
                                // pname={this.state.auth_list[author].proj_name}
                                // author={this.state.auth_list[author].commit_name}
                                // pname={this.state.auth_list[auth_name].proj_name}
                                // author={this.state.auth_list[auth_name].commit_name}
                                icon="far fa-folder"
                                color="bg-info"
                                />                              
                                <VulnerabilityProjectCard
                                title="Project Name"
                                // pname={this.state.auth_list[auth_name].proj_name}
                                // author={this.state.auth_list[auth_name].commit_name}
                                icon="far fa-folder"
                                color="bg-info"
                                />
                              {/* <p>{this.state.auth_list[auth_name].proj_name}</p>
                              <p>{this.state.auth_list[auth_name].commit_name}</p> */}
                              </div>
                            {/* } */}
                          </Accordion.Body>
                        </Accordion.Item>
                      </Accordion>
                    )
                  })}
                </Accordion.Body>
              </Accordion.Item>
            </Accordion>

          )
        }
      })
    }
  }

  render() {
    return (
      <Card className="shadow">
        <CardHeader className="border-0">
          <Row className="align-items-center">
            {this.state.title &&
              <div className="col">
                <h3 className="mb-0">{this.state.title}</h3>
              </div>
            }
          </Row>
        </CardHeader>
            {this.renderBody()}
      </Card>
    );
  }
}

export default VulnerabilityStatTable;