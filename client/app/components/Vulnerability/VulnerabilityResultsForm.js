import React from 'react';
import VulnerabilityResultsHeader from './VulnerabilityResultsHeader';
import VulnerabilityStatTable from '../common/VulnerabilityStatTable';
import { withRouter } from "react-router-dom";
import { connect } from 'react-redux';
import axios from 'axios';
import { Button } from '@mui/material';

import {
  Container,
  Card,
	CardBody
} from "reactstrap";



const VulnerabilityResultsForm = () => {
  const [loading, setLoading] = React.useState(true);
  const [sha, setSha] = React.useState("");
  const [showBlob, setShowBlob] = React.useState(false);
  const [data, setData] = React.useState({});
  useEffect(() => {
    const search = window.location.search;
    const params = new URLSearchParams(search);
    //Get the sha within the url
    const sha = params.get('sha');  
    setSha(sha);
    const hasCachedResults = (params.get('status') == 'true');
    if(hasCachedResults) {
      axios.get(`/api/getThatFile/sha-${sha}.json`)
        .then((res) => {
          setData(res.data);
          setLoading(false);
        })
        .catch(error => console.error(error)); 
    } else {
      axios.post('/api/vulnerability', {input: sha})
      .then(response => {
        //TODO: Change after fixing API route
        setData(response.data.value);
        setLoading(false);
      })
      .catch(error => console.error(error)); 
    }
  }, []);
  
 
  const cancelRequest = (e) => {
		e.preventDefault();	
		this.props.history.push('/vulnerability');
	}


  const toggleBlob = () => {
     setShowBlob(!showBlob); 
  }

  return(
    <>
      {loading && (
        <>
          <Card className="bg-secondary shadow border-0" style={{ width: '30rem'}}>
            <CardBody className="px-lg-5 py-lg-5">
              <form onSubmit={cancelRequest}>
                <b>Fetching sha:</b>
                <p>{this.state.sha}</p>
                <br/>
                <br/>
                <Button type='submit'variant="contained">Cancel</Button>
              </form>
            </CardBody>
          </Card>
        </>
      )}
      {!loading && (
        <>
          <VulnerabilityResultsHeader stats={testNewData}/>
          <Container className="mt-4" fluid>
            <VulnerabilityStatTable
            onClickBlob={this.onClickBlob}
            stats={testNewData}
            headers="Blob SHA"
            title="Blobs"/>
          </Container>
        </>
      )}
    </>
  );
}

VulnerabilityResultsForm.propTypes = {}
const mapStateToProps = (state) => {return {}} 

export default connect(mapStateToProps, {})(withRouter(VulnerabilityResultsForm));
