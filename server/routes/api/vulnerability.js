const vulnerabilityValidateMiddleware = require('../../middlewares/vulnerabilityValidate');
const { validationResult } = require('express-validator');
const { getOldBlobs, getNewBlobs, handleBlob } = require('../../shared/vulnerability/blobs');
let fs = require('fs');
const path = require('path');

module.exports = (app) => {
    app.get('/api/vulnerability', vulnerabilityValidateMiddleware, vulnerability);
}

module.exports = (app) => {
    app.post('/api/vulnerability', async (req, res) => {
        const EMPTY_FILE_HASH = "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391";
        console.log("Post request received.");
        console.log("Request data: ", req.body);
        let [oldBlobs, newBlobs] = await Promise.all([getOldBlobs(req.body.input),getNewBlobs(req.body.input)]);           
        oldBlobs = oldBlobs.filter(hash => hash != EMPTY_FILE_HASH && hash != req.body.input);
        newBlobs = newBlobs.filter(hash => hash != EMPTY_FILE_HASH);
        let allBlobs = [...new Set(oldBlobs.concat(newBlobs))];
        let allBlobInfo = await Promise.all(allBlobs.map(blob => handleBlob(blob)));
        allBlobInfo = allBlobInfo.filter(blob => typeof blob != 'undefined');

        /**
         * Function to write the all the blob information to file
         * Need to pass a parameter so we can save the sha for future searches
         */
        let data = JSON.stringify(allBlobInfo, null, 2);
        fs.writeFile('/home/lgonzal6/DRE/server/VulnerabilityData/test.json', data, finished);
        function finished(err) {
            console.log('done');
        }

        res.status(200).json({success: true, value: allBlobInfo});
    });
    app.get('/api/vulnerability', vulnerabilityValidateMiddleware, (req, res, next) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(422).json({ errors: errors.array() });
        }
        console.log (req.query.command+";"+req.query.type+";"+req.query.sha1+";")
        execLookup(req.query.sha1, req.query.command, req.query.type).then( ret => res.status(200).send(ret) );
    });
}