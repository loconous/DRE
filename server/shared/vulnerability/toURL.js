/**
 * toURL.js
 * Take a project name from WoC and print the URL for the project
 * Based on Dr. Reid's toURL, which creates available URLs for projects in WoC
 * @params projName - Project Name
 * @returns Github URL
 */

/**
 * Get URL for project name from an author
 * @params sha1 - Sha1 hash of a blob
 */
function toURL(author, projectNames) {
    let found = false;
    toUrlMap = {
        "bb": "bitbucket.org", 
        "gl": "gitlab.org",
        "gitlab.com": "gitlab.com",
        "android.googlesource.com": "android.googlesource.com",
        "bioconductor.org": "bioconductor.org",
        "drupal.com": "git.drupal.org",
        "git.eclipse.org": "git.eclipse.org",
        "git.kernel.org": "git.kernel.org",
        "git.postgresql.org": "git.postgresql.org" ,
        "git.savannah.gnu.org": "git.savannah.gnu.org",
        "git.zx2c4.com": "git.zx2c4.com" ,
        "gitlab.gnome.org": "gitlab.gnome.org",
        "kde.org": "anongit.kde.org",
        "repo.or.cz": "repo.or.cz",
        "salsa.debian.org": "salsa.debian.org",
        "sourceforge.net": "git.code.sf.net/p"
    }
    
    let count = projectNames.match(/_/g) || [];
    var newprojectNames = projectNames.replace(/_/g, "/");

    let url = new URL('https://github.com');

    for (domain in toUrlMap) {
        if (newprojectNames.startsWith(domain[0]) && (count >=1 || domain == "sourceforge.net")) {
            found = true;
            break;
        }
    }

    if (found) {
        let projUrl = new URL('https://' + newprojectNames);
        return projUrl;
    }
    
    let projUrl = new URL(newprojectNames, url);
    return projUrl;
}

module.exports = toURL;