/**
 * toURL.js
 * Take a project name from WoC and print the URL for the project
 * Based on Dr. Reid's toURL, which creates available URLs for projects in WoC
 * @params projName - Project Name
 * @returns Github URL
 */

/**
 * Get URL for project name from an author
 * @params sha1 - Sha1 hash of a blob
 */
function toURL(projectNames) {
    let toUrlMap = {
        'bb': 'bitbucket.org', 
        'gl': 'gitlab.org',
        'gitlab.com': 'gitlab.com',
        'android.googlesource.com': 'android.googlesource.com',
        'bioconductor.org': 'bioconductor.org',
        'drupal.com': 'git.drupal.org',
        'git.eclipse.org': 'git.eclipse.org',
        'git.kernel.org': 'git.kernel.org',
        'git.postgresql.org': 'git.postgresql.org' ,
        'git.savannah.gnu.org': 'git.savannah.gnu.org',
        'git.zx2c4.com': 'git.zx2c4.com' ,
        'gitlab.gnome.org': 'gitlab.gnome.org',
        'kde.org': 'anongit.kde.org',
        'repo.or.cz': 'repo.or.cz',
        'salsa.debian.org': 'salsa.debian.org',
        'sourceforge.net': 'git.code.sf.net/p'
    }
    
    let found = false;
    let url = new URL('https://github.com');
    let newprojectNames = projectNames.replace(/_/g, '/');
    
    for(knownDomains in toUrlMap) {
        if(newprojectNames.startsWith(toUrlMap[knownDomains])) {
            found = true;
            break;
        }
    }   
    
    if (found) {
        let projUrl = new URL('https://' + newprojectNames);
        //console.log(projUrl);
        return projUrl;
    }
        
    let projUrl = new URL(newprojectNames, url);
    //console.log(projUrl);
    return projUrl;
}

module.exports = toURL;
