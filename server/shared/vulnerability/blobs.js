/**
 *  blobs.js
 *  Functions related to retrieving blob data
 */
const execLookup = require('../lookup/lookup'); 
const EMPTY_FILE_HASH = "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391";
//Testing sha a8fe822f075fa3d159a203adfa40c3f59d6dd999
/**
 * Based on Dr. Reid's b2ob, which uses WoC's lookup/getValues to retrieve old blobs 
 * @params sha1 - Sha1 hash of a blob
 * @returns An array of sha1 hashes of old blobs
 */
function b2ob(blob) {
    //Call lookup/getValues with b2ob to get old blobs from a list of blobs. 
    //Blobs are separated by a newline
    return execLookup(blob.join('\r\n'), "getValues", "-f b2ob").then(ret =>{
        let blobs = ret.stdout.split('\n');
        blobs = blobs.map(b => b.split(';').filter(b => b != '')).filter(arr => arr.length);
        return blobs;
    });
}
/**
 * Based on Dr. Reid's b2ob_r, which recursively gets blobs in WoC using b2ob   mapping 
 * @params sha1 - Sha1 hash of a blob
 * @params list - List of blobs already found
 */
function b2ob_r(blob, blobList) {
   //Get old blobs from current blob. 
   console.log("BLOB LIST: ", blobList);
   return b2ob(blob).then(blobs => {
        blob.forEach(b => blobList.push(b));
        let uniqueBlobs = [];
        //Check to see if there are any unique blobs in the current collection of blobs
        for(let i = 0; i < blobs.length; i++) {
            for(let j = 0; j < blobs[i].length; j++) {
                if(!blobList.includes(blobs[i][j])) {
                    uniqueBlobs.push(blobs[i][j]);
                }
            }
        }
        //If there are any new blobs, call b2ob_r on them
        if(uniqueBlobs.length != 0) {
            return b2ob_r(uniqueBlobs, blobList);
        } else {
            return blobList;
        }
   }); 
}

/**
 * Based on Dr. Reid's b2ob_r, which recursively gets blobs in WoC using b2ob   mapping 
 * @params sha1 - Sha1 hash of a blob
 */
async function getBlobData(sha1) {
    let blobList = [EMPTY_FILE_HASH];
    const blob = [sha1];
    return b2ob_r(blob, blobList).then(() => {
        return blobList;
    });
    //FIXME: This is logged before b2ob_r finishes. 
}

module.exports = {
    getBlobData
}